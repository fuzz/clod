#!/bin/bash
# Wrapper script for clod that automatically opens the staging directory

# Exit on error
set -e

# Get clod's path - try to find it in several common locations
find_clod() {
  # Check if in PATH
  which clod 2>/dev/null && return

  # Common installation directories
  for dir in "/usr/local/bin" "/usr/bin" "$HOME/.cabal/bin" "$HOME/.local/bin"; do
    if [ -x "$dir/clod" ]; then
      echo "$dir/clod"
      return
    fi
  done

  # If we can't find it, try the build directory
  # Use find to locate the clod binary in dist-newstyle regardless of architecture or GHC version
  BUILT_CLOD=$(find "./dist-newstyle" -name "clod" -type f -executable 2>/dev/null | grep -v "\.dyn_o" | head -n 1)
  if [ -n "$BUILT_CLOD" ]; then
    echo "$BUILT_CLOD"
    return
  fi

  # Not found
  echo "Error: Could not find clod binary. Please make sure it's installed and in your PATH." >&2
  exit 1
}

# Use all passed arguments, but remove --open if present
ARGS=()
OPEN=true
for arg in "$@"; do
  if [ "$arg" == "--no-open" ]; then
    OPEN=false
    continue
  else
    ARGS+=("$arg")
  fi
done

# Find the clod binary
CLOD_PATH=$(find_clod)

# Run clod with arguments and capture the output
CLOD_OUTPUT=$($CLOD_PATH "${ARGS[@]}")
CLOD_EXIT=$?

# The output is just the path to the staging directory (Unix-style clean output)
# Clean any extra whitespace or newlines
STAGING_PATH=$(echo "$CLOD_OUTPUT" | tr -d '\r\n')

# If we couldn't find a staging path in the output, display an error
if [ -z "$STAGING_PATH" ] || [ ! -d "$STAGING_PATH" ]; then
  echo "Error: Could not determine staging directory path." >&2
  echo "The command was executed, but automatic file browser opening is not available." >&2
  OPEN=false
fi

# If the command was successful and --open wasn't disabled, open the staging directory
if [ $CLOD_EXIT -eq 0 ] && [ "$OPEN" = true ]; then
  # Check if we need to create the directory
  if [ ! -d "$STAGING_PATH" ]; then
    mkdir -p "$STAGING_PATH"
  fi

  # Check platform
  PLATFORM="$(uname -s)"
  if [ "$PLATFORM" != "Darwin" ]; then
    echo "Warning: This script has only been tested on macOS but should work on" >&2
    echo "any platform that has an 'open' command that takes a directory as an argument." >&2
    echo "Proceed [y/N]?" >&2
    read -r response
    if [[ ! "$response" =~ ^[Yy] ]]; then
      echo "Files are in: $STAGING_PATH" >&2
      OPEN=false
    fi
  fi
  
  # Open directory if enabled
  if [ "$OPEN" = true ]; then
    if [ "$PLATFORM" = "Darwin" ]; then
      # macOS
      open "$STAGING_PATH"
    else
      # Try to use open command
      if command -v open >/dev/null 2>&1; then
        open "$STAGING_PATH"
      else
        echo "Warning: 'open' command not found. Files are in: $STAGING_PATH" >&2
      fi
    fi
  fi
fi

# Print the clod output
echo "$CLOD_OUTPUT"

# Exit with the same code as clod
exit $CLOD_EXIT
