.\" Automatically generated by Pandoc 3.6.4
.\"
.TH "CLOD" "8" "March 2025" "Clod 0.1.0"
.SH NAME
clod \- complete workflow guide for using clod with Claude AI
.SH DESCRIPTION
This man page contains a comprehensive guide to using clod with Claude
AI, including best practices, workflow details, and integration tips.
# clod: Human Guide
.PP
A streamlined workflow system for coding with Claude AI using filesystem
access and project knowledge.
.SS What is clod?
clod (meat\-robot hybrid) creates a smooth integration between your
local codebase and Claude AI\[cq]s coding capabilities.
It solves key problems when using Claude for coding:
.IP "1." 3
It optimizes your files for Claude\[cq]s project knowledge UI
.IP "2." 3
It tracks which files have changed since your last upload
.IP "3." 3
It maintains a mapping between Claude\[cq]s filenames and your actual
repository paths
.IP "4." 3
It provides clear instructions to Claude on how to implement your
requests
.SS Claude Features Used by clod
\f[B]Project Knowledge\f[R] is a feature in Claude that allows you to
upload files that Claude can reference during your conversation.
These files remain accessible throughout your project without consuming
your conversation\[cq]s context window.
.PP
\f[B]Filesystem Access\f[R] is a feature that allows Claude to read from
and write to files on your local system (currently available only on
macOS and Windows desktop applications).
This enables Claude to directly modify your codebase based on your
instructions.
.SS Prerequisites
.IP \[bu] 2
\f[B]Claude Pro or Team account\f[R] with access to:
.RS 2
.IP \[bu] 2
\f[B]Project Knowledge\f[R] \- Claude\[cq]s file storage system that
keeps files available throughout your project
.IP \[bu] 2
\f[B]Filesystem Access\f[R] \- Claude\[cq]s ability to read and write
files on your computer (currently available only on macOS and Windows
desktop apps)
.RE
.IP \[bu] 2
Git repository for your codebase
.IP \[bu] 2
Terminal/command\-line access
.SS Comparison with Claude Code
While Anthropic\[cq]s Claude Code offers powerful agentic capabilities
directly in your terminal, clod provides a complementary and often more
cost\-effective approach:
.SS When to Use clod vs.\ Claude Code
.IP \[bu] 2
\f[B]Cost Efficiency\f[R]: clod leverages Claude Pro\[cq]s project
knowledge caching, resulting in significantly lower token usage compared
to Claude Code\[cq]s real\-time analysis.
.IP \[bu] 2
\f[B]Hybrid Approach\f[R]: I find success using clod with Claude Pro as
my primary workflow, switching to Claude Code only when hitting Pro plan
limits.
.IP \[bu] 2
\f[B]Test Integration\f[R]: When combined with file watching tools like
fswatch (see below), clod offers comparable testing capabilities to
Claude Code at a fraction of the token cost.
.IP \[bu] 2
\f[B]Seamless Fallback\f[R]: If you reach Claude Pro limits, you can
continue your work with Claude Code until access is restored without
changing your workflow significantly.
.PP
The workflow I use is: 1.
Use clod with Claude Pro for day\-to\-day development tasks 2.
Set up fswatch or similar tools for automated testing 3.
Keep Claude Code as a backup for high\-volume days or especially complex
tasks requiring whole\-codebase analysis
.PP
This hybrid approach optimizes both cost and capability while ensuring
continuous productivity.
.SS The Problem
When working with code in Claude, you face several challenges:
.IP "1." 3
\f[B]Project Knowledge Management\f[R]: The project knowledge section in
Claude accepts files, but with several limitations:
.RS 4
.IP \[bu] 2
Limited filename display (long paths get truncated)
.IP \[bu] 2
Duplicate filenames are hard to distinguish
.IP \[bu] 2
No direct connection to your local file system
.RE
.IP "2." 3
\f[B]Workflow Friction\f[R]: Moving files between your local environment
and Claude involves multiple manual steps:
.RS 4
.IP \[bu] 2
Selecting which files to upload
.IP \[bu] 2
Uploading them to Claude\[cq]s project knowledge
.IP \[bu] 2
Remembering original paths when writing changes back
.IP \[bu] 2
Managing incremental updates as you modify files
.RE
.IP "3." 3
\f[B]Context Window Costs\f[R]: Using Claude\[cq]s filesystem access
directly on all files can quickly consume your context window,
significantly limiting conversation length.
.SS The Solution
clod provides a complete, end\-to\-end workflow for coding with Claude
AI:
.IP "1." 3
\f[B]Smart File Selection & Upload Preparation\f[R]:
.RS 4
.IP \[bu] 2
Haskell\-based tool that finds modified files in your git repository
.IP \[bu] 2
Respects \f[CR].gitignore\f[R] patterns and excludes binary files
.IP \[bu] 2
Optimizes filenames for Claude\[cq]s UI (converting paths to prefixes)
.IP \[bu] 2
Creates a path manifest for accurately writing files back
.RE
.IP "2." 3
\f[B]Seamless Code Modification Workflow\f[R]:
.RS 4
.IP \[bu] 2
Project instructions that teach Claude how to use the uploaded files
.IP \[bu] 2
Automatic path resolution when writing files back to disk
.IP \[bu] 2
End\-to\-end implementation of requested changes with minimal user input
.RE
.IP "3." 3
\f[B]Testing Integration\f[R]:
.RS 4
.IP \[bu] 2
Proactive test coverage for modified code
.IP \[bu] 2
Automatic test updates alongside code changes
.RE
.SS Special File Handling
clod includes special handling for certain file types to ensure optimal
compatibility with Claude\[cq]s Project Knowledge system.
.SS SVG Files
SVG files are automatically converted to XML files when processed by
clod.
This is because Claude\[cq]s Project Knowledge system doesn\[cq]t
officially support the SVG file extension, but it can work with XML
files (since SVGs are fundamentally XML files).
.SS How SVG Handling Works
.IP "1." 3
When clod processes an SVG file, it renames it with a special format:
.RS 4
.IP \[bu] 2
\f[CR]logo.svg\f[R] becomes \f[CR]logo\-svg.xml\f[R]
.IP \[bu] 2
\f[CR]public/logo.svg\f[R] becomes \f[CR]public\-logo\-svg.xml\f[R]
.RE
.IP "2." 3
The original file path is preserved in the
\f[CR]_path_manifest.json\f[R] file, ensuring Claude writes back to the
correct SVG file when making changes.
.IP "3." 3
In your conversations with Claude, you can refer to these files using
either name:
.RS 4
.IP \[bu] 2
\[lq]Can you modify the SVG in public/logo.svg?\[rq]
.IP \[bu] 2
\[lq]Can you update the XML in public\-logo\-svg.xml?\[rq]
.RE
.IP "4." 3
When Claude writes the file back to your filesystem, it will use the
original SVG path.
.SS Benefits
.IP \[bu] 2
You can continue working with standard SVG files in your projects
without interruption
.IP \[bu] 2
No manual conversion is needed \- everything happens automatically
.IP \[bu] 2
Claude can fully view and edit SVG content just like any other XML file
.IP \[bu] 2
Your project structure remains clean with proper SVG extensions
.PP
This feature allows you to leverage Claude\[cq]s capabilities with SVG
files while ensuring compatibility with the Project Knowledge system.
.SS Example Workflow
Here\[cq]s a typical workflow using clod:
.IP "1." 3
\f[B]Initial Setup\f[R]:
.RS 4
.IP
.EX
cd my\-react\-project
clod  \f[I]# Choose \[dq]Import all files\[dq]\f[R]
.EE
.RE
.IP "2." 3
\f[B]Upload to Claude\f[R]:
.RS 4
.IP \[bu] 2
Create a new Claude Project called \[lq]My React Project\[rq]
.IP \[bu] 2
Upload files from the staging directory to Project Knowledge
.IP \[bu] 2
Click on \[lq]Project Instructions\[rq] in the left sidebar
.IP \[bu] 2
Paste the contents of \f[CR]project\-instructions.md\f[R] into this
section
.IP \[bu] 2
Add any desired guardrails to the bottom of the Project Instructions
.IP \[bu] 2
Start a new conversation
.RE
.IP "3." 3
\f[B]Request Changes\f[R]: \[lq]Please refactor the user authentication
flow to use JWT tokens instead of session cookies\[rq]
.IP "4." 3
\f[B]Review and Approve\f[R]:
.RS 4
.IP \[bu] 2
Claude shows you artifacts with modified code
.IP \[bu] 2
Claude explains key changes made
.IP \[bu] 2
You approve the changes
.RE
.IP "5." 3
\f[B]Next Iteration\f[R]:
.RS 4
.IP
.EX
clod  \f[I]# Now only shows files modified since last run\f[R]
.EE
.IP \[bu] 2
Upload the new files from the staging directory
.IP \[bu] 2
\f[B]Important\f[R]: Before starting a new conversation, manually delete
the previous versions of these files from Project Knowledge
.IP \[bu] 2
Start a new conversation
.RE
.SS Working with Project Knowledge
When working with Claude on complex codebases, you may sometimes notice
that Claude doesn\[cq]t fully consider all files in the project
knowledge section.
This is due to how Claude\[cq]s Retrieval\-Augmented Generation (RAG)
works with large file collections.
.SS Tips for Better File Retrieval
.IP "1." 3
\f[B]Be specific about file references\f[R]: If Claude seems to miss
context, explicitly mention the relevant files:
.RS 4
.IP
.EX
\[dq]Please check the file config\-settings.js in the project knowledge section to see how we handle environment variables.\[dq]
.EE
.RE
.IP "2." 3
\f[B]Prompt thorough examination\f[R]: Encourage Claude to thoroughly
check all relevant files:
.RS 4
.IP
.EX
\[dq]Before implementing this change, please carefully consider all files in the project knowledge section that relate to user authentication.\[dq]
.EE
.RE
.IP "3." 3
\f[B]Confirm file content understanding\f[R]: Ask Claude to summarize
key files to ensure proper context:
.RS 4
.IP
.EX
\[dq]Could you first summarize what our current Header component does based on the file in project knowledge?\[dq]
.EE
.RE
.IP "4." 3
\f[B]Guide file exploration\f[R]: If working with a large codebase,
guide Claude\[cq]s attention:
.RS 4
.IP
.EX
\[dq]The relevant code is primarily in the src/components and src/utils directories. Please focus on those files first.\[dq]
.EE
.RE
.IP "5." 3
\f[B]Iterative refinement\f[R]: If Claude misses important context,
point it out explicitly:
.RS 4
.IP
.EX
\[dq]I notice you didn\[aq]t consider how this interacts with the API client in api\-client.js. Please review that file and adjust your implementation.\[dq]
.EE
.RE
.PP
These techniques can significantly improve Claude\[cq]s ability to work
effectively with your codebase.
.SS Automatic Testing with File Watching
clod works even better when combined with file watching tools that
automatically run tests when Claude writes changes back to your
filesystem.
.RS
.PP
\f[B]Note:\f[R] Currently, Claude\[cq]s filesystem access is only
available on macOS and Windows desktop applications, not on Linux.
The file watching setup below is applicable only for macOS.
.RE
.SS Using fswatch for Automatic Testing
Here\[cq]s a basic example of using \c
.UR https://github.com/emcrisostomo/fswatch
fswatch
.UE \c
\ to automatically run tests for a Node.js project:
.IP
.EX
\f[I]# Install fswatch\f[R]
brew install fswatch

\f[I]# Create a simple watcher script\f[R]
cat > test\-watcher.sh << \[aq]EOF\[aq]
#!/bin/bash
# Simple test watcher for Node.js projects

# Path to your project
PROJECT_PATH=\[dq]$1\[dq]
if [ \-z \[dq]$PROJECT_PATH\[dq] ]; then
  echo \[dq]Usage: $0 /path/to/your/project\[dq]
  exit 1
fi

run_tests() {
  echo \[dq]🧪 Running tests at $(date)\[dq]
  cd \[dq]$PROJECT_PATH\[dq] || exit 1
  
  # Only run tests if package.json exists
  if [ \-f \[dq]package.json\[dq] ]; then
    npm test
  else
    echo \[dq]No package.json found \- skipping tests\[dq]
  fi
  
  echo \[dq]✅ Done\[dq]
  echo \[dq]\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\[dq]
}

echo \[dq]👀 Watching $PROJECT_PATH for changes...\[dq]
echo \[dq]Press Ctrl+C to stop watching\[dq]

# Initial test run
run_tests

# Start watching for file changes
fswatch \-o \[dq]$PROJECT_PATH\[dq] | while read \-r; do
  run_tests
done
EOF

\f[I]# Make it executable\f[R]
chmod +x test\-watcher.sh

\f[I]# Run it\f[R]
\&./test\-watcher.sh \[ti]/path/to/your/project
.EE
.SS Using Test Results with Claude
When using file watchers to run tests:
.IP "1." 3
After Claude makes changes to your code, the file watcher will
automatically run tests
.IP "2." 3
Share test output with Claude by copying the terminal output
.IP "3." 3
Claude can analyze test failures and suggest fixes
.IP "4." 3
This creates a rapid feedback loop where Claude can iteratively improve
the code
.PP
This simple setup ensures that as Claude makes changes to your codebase,
you\[cq]ll get immediate feedback on whether those changes maintain the
integrity of your project.
.SS Configuration
The tool creates a configuration directory at \f[CR].clod/\f[R] in your
project root: \- \f[CR]last\-run\-marker\f[R]: Tracks when the tool was
last run for incremental updates \- Path mappings are stored in each
staging directory
.SH AUTHORS
Fuzz Leonard.
